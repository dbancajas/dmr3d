/* Copyright (c) 2003 by Gurindar S. Sohi for the Wisconsin
 * Multiscalar Project.  ALL RIGHTS RESERVED.
 *
 * This software is furnished under the Multiscalar license.
 * For details see the LICENSE.mscalar file in the top-level source
 * directory, or online at http://www.cs.wisc.edu/mscalar/LICENSE
 *
 */

/* $Id: mem_hier_defs.h,v 1.5.2.4 2005/06/16 18:16:41 kchak Exp $
 *
 * description:    definitions for mem-hier types
 * initial author: Philip Wells 
 *
 */
 
#ifndef _MEM_DEFINITIONS_H_
#define _MEM_DEFINITIONS_H_

// Type definitions
typedef uint32 size_t;

// module declarations
class mem_hier_t;
class mem_driver_t;

// Interface
class mem_hier_interface_t;
class proc_interface_t;
class mem_trans_t;
class dynamic_instr_t;  // Processor's
class invalidate_addr_t;

// cache classes
class cache_t;
class cache_bank_t;
class line_t;
template <class prot_t> class tcache_t;
template <class type_t> class mshr_t;
template <class type_t> class mshrs_t;
template <class cache_t> class prefetch_engine_t;
struct cache_config_t;

// network classes
class link_t;
class device_t;
class message_t;

// Devices
class generic_proc_t;
template <class prot_t, class msg_t> class proc_t;
template <class prot_t, class msg_t> class main_mem_t;


// statemachine classes
template <typename action_t, typename state_t,
          class prot_line_t> class transfn_info_t;
template <typename state_t, class prot_line_t> class transfn_return_t;
template <class prot_t> class statemachine_t;

// Events
template <class data_type, class context_type> class event_t;
class generic_event_t;
class meventq_t;
class trans_rec_t;
class random_tester_t;
// Profile Class
class mem_trace_profile_t;

// Enumerations
enum stall_status_t {
	StallNone,
	StallSetEvent,
	StallOtherEvent,
	StallPoll,
	StallMax
};

enum mem_return_t {
	MemComplete,      // Mem transaction hit and is ready
	MemMiss,          // Mem transaction missed
	MemStall,         // could not accept memory request
	MemReturnMax
};


#endif // _MEM_DEFINITIONS_H_
