/* Copyright (c) 2003 by Gurindar S. Sohi for the Wisconsin
 * Multiscalar Project.  ALL RIGHTS RESERVED.
 *
 * This software is furnished under the Multiscalar license.
 * For details see the LICENSE.mscalar file in the top-level source
 * directory, or online at http://www.cs.wisc.edu/mscalar/LICENSE
 *
 */

/* $Id: mem_driver.h,v 1.3 2005/01/18 17:51:49 pwells Exp $
 *
 * description:    translates between the simics 'timing-model' and mem-hier
 *                 interfaces
 * initial author: Philip Wells 
 *
 */
 
#ifndef _MEM_DRIVER_H_
#define _MEM_DRIVER_H_

#include <ext/hash_map>

using namespace __gnu_cxx;

class mem_driver_t : public mem_hier_handle_iface_t {
	
 public:
	
	mem_driver_t(proc_object_t *_proc);
	conf_object_t *get_cpu();
	
	// Simics interface
	cycles_t timing_operate(conf_object_t *proc_obj, conf_object_t *space, 
		map_list_t *map, generic_transaction_t *mem_op);
	cycles_t snoop_operate(conf_object_t *proc_obj, conf_object_t *space, 
		map_list_t *map, generic_transaction_t *mem_op);
		
	// Memhier interface
	void complete_request(conf_object_t *obj, conf_object_t *cpu, 
		mem_trans_t *trans);
	void invalidate_address(conf_object_t *obj, conf_object_t *cpu, 
		invalidate_addr_t *invalid_addr);
	
	void print_stats();
	
	// TODO: get
	void set_cpus(conf_object_t **cpus, uint32 num_cpus);
	void set_runtime_config(string config);
	string get_runtime_config();
	
	// TODO:
	void set_checkpoint_file(string filename) { }
	string get_checkpoint_file() { return ""; }

private:

	// Number of cycles to stall when not polling
	static const int max_stall = 100000;

	mem_hier_t *mem_hier;
	
	// Map of outstanding transcactions
	// +1 for I/O device
	hash_map < int, mem_trans_t *> *transactions;
	
	string runtime_config_file;
    cycles_t initiation_cycle;
    bool   break_sim_called;
    proc_object_t *proc;
    void auto_advance_memhier();
    

};

#endif /* _MEM_DRIVER_H */
